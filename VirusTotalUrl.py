# -*- coding: utf-8 -*-

# meta developer: @xuduk
# This module checks links via VirusTotal API.

from .. import loader, utils
import requests
import logging

logger = logging.getLogger(__name__)

@loader.tds
class VirusTotalUrlMod(loader.Module):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ VirusTotal API"""
    strings = {"name": "Virus Total URL"}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.api_key = self.db.get("VirusTotal", "api_key", None)
        if not self.api_key:
            logger.warning("<emoji document_id=5210952531676504517>‚ùå</emoji> API Key –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .setvtotalkey")

    @loader.owner
    async def setvtotalkeycmd(self, message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç API-–∫–ª—é—á VirusTotal\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .setvtotalkey <API_KEY>"""
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á VirusTotal.\n"
                                "–ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞ www.virustotal.com/gui/my-apikey</b>")
            return
        self.api_key = args.strip()
        self.db.set("VirusTotal", "api_key", self.api_key)
        await message.edit("<b>API-–∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω.</b>")

    async def vtotalcmd(self, message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ VirusTotal\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .vtotal <—Å—Å—ã–ª–∫–∞>"""
        if not self.api_key:
            await message.edit("<b><emoji document_id=5210952531676504517>‚ùå</emoji> API Key –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>.setvtotalkey</code><b>")
            return

        args = utils.get_args_raw(message)
        if not args:
            await message.edit("<b><emoji document_id=5210952531676504517>‚ùå</emoji> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.</b>")
            return

        url = args.strip()

        await message.edit("<b>–ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É...</b>")

        headers = {
            "Accept": "application/json",
            "x-apikey": self.api_key
        }

        scan_url = "https://www.virustotal.com/api/v3/urls"

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –≤ —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–∏–Ω—è—Ç—ã–π VirusTotal
            response = requests.post(scan_url, headers=headers, data={"url": url})
            if response.status_code != 200:
                await message.edit(f"<emoji document_id=5210952531676504517>‚ùå</emoji> <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {response.text}</b>")
                return

            data = response.json()
            url_id = data["data"]["id"]

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            analysis_url = f"https://www.virustotal.com/api/v3/analyses/{url_id}"
            analysis_response = requests.get(analysis_url, headers=headers)

            if analysis_response.status_code != 200:
                await message.edit(f"<b><emoji document_id=5210952531676504517>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {analysis_response.text}</b>")
                return

            analysis_data = analysis_response.json()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
            status = analysis_data["data"]["attributes"]["status"]
            if status == "queued":
                await message.edit("<b><emoji document_id=5451646226975955576>‚åõÔ∏è</emoji> –°—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–Ω–∞–ª–∏–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.</b>")
                return

            stats = analysis_data["data"]["attributes"]["stats"]

            harmless = stats.get("harmless", 0)
            malicious = stats.get("malicious", 0)
            suspicious = stats.get("suspicious", 0)
            undetected = stats.get("undetected", 0)
            timeout = stats.get("timeout", 0)

            result_message = (
                f"<b>**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:**</b>\n"
                f"<b><emoji document_id=5352888345972187597>‚úÖ</emoji> –ë–µ–∑–æ–ø–∞—Å–Ω–æ: {harmless}</b>\n"
                f"<b><emoji document_id=5364241851500997604>‚ö†Ô∏è</emoji> –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ: {malicious}</b>\n"
                f"<b><emoji document_id=5393144297048516784>ü§®</emoji> –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ: {suspicious}</b>\n"
                f"<b><emoji document_id=5435893060028345073>üòê</emoji> –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {undetected}</b>\n"
                f"<b><emoji document_id=5451646226975955576>‚åõÔ∏è</emoji> –¢–∞–π–º–∞—É—Ç: {timeout}</b>"
            )

            await message.edit(result_message)

        except Exception as e:
            logger.error(e)
            await message.edit(f"<emoji document_id=5210952531676504517>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")